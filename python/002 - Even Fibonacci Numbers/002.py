import timeit

"""QUESTION:
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

"""
This question would actually be rather simple to solve for numbers that do not exceed four million.
This is due to the fact that Fibonacci numbers exponentially increase in size, and therefore exceed four million faster than you may expect.
Infact, the sequence exceeds four million mark at the 34th term, therefore, with a simple and short loop, this task can be solved relatively easily.

Even so, we can have some fun at solving this, as there are two possible methods of doing this.
These being both iteratively and recursively.
I will write two functions that will do both of these, fibIterative (iterative) and fibRecursive (recursively) and output the value of both.


However, I wish to extend this program further:
In 002-extended.py I will explore methods of calculated the even values of the Fibonacci sequence for which values do not exceed a given n.
Although this program currently does this, I feel like there must be some faster, mathematical way to solve it rather than recursion / iteration.
"""

#TODO: Work this out lmao
def fibRecursive(limit, n):
    if n == 0: return 0
    if n == 1: return 1

    return fibRecursive(limit, n-1) + fibRecursive(limit, n-2)

def fibIterative(n):
    """Find sum of even terms up to n iteratively"""
    a = 0
    b = 1

    temp = 0

    even_sum = 0

    while b < n:
        temp = b
        b = a + b
        a = temp

        if (a % 2 == 0):
             even_sum = even_sum + a

    return even_sum

def compute(n):
    #print("Even Fibonacci Terms up to %d recusively : %d" % (n, fibRecursive(n)))
    print("Even Fibonacci Terms up to %d iteratively : %d" % (n, fibIterative(n)))

if __name__ == "__main__":
    start = timeit.default_timer()

    compute(4000000)

    stop = timeit.default_timer()
    print('Time: ', stop - start)  